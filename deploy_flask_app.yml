---
- name: Deploy Flask App to n1
  hosts: n1
  become: yes
  vars:
    app_dir: /opt/flask_app
    flask_user: ubuntu
    flask_group: "{{ flask_user }}"
    flask_port: 5000
    venv_path: "{{ app_dir }}/venv"

  tasks:
    # 1. Install system packages
    - name: Install dependencies
      apt:
        name:
          - python3-pip
          - python3-venv
          - unzip
          - python3-dev
          - build-essential  # For any Python packages needing compilation
        state: present
        update_cache: yes

    # 2. Create app directory structure
    - name: Create app directory structure
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ flask_user }}"
        group: "{{ flask_group }}"
        mode: '0755'
      loop:
        - "{{ app_dir }}"
        - "{{ app_dir }}/logs"
        - "{{ app_dir }}/tmp"

    # 3. Secure copy with validation
    - name: Transfer application bundle
      ansible.builtin.copy:
        src: "files/flask_app.zip"
        dest: "{{ app_dir }}/flask_app.zip"
        owner: "{{ flask_user }}"
        group: "{{ flask_group }}"
        mode: '0644'
        remote_src: false
        checksum: "sha256:{{ lookup('file', 'files/hash.txt').split()[0] }}"

    # 4. Extract with proper permissions
    - name: Extract application
      unarchive:
        src: "{{ app_dir }}/flask_app.zip"
        dest: "{{ app_dir }}"
        remote_src: yes
        owner: "{{ flask_user }}"
        group: "{{ flask_group }}"
        extra_opts: 
          - "-j"  # Junk paths
          - "-o"  # Overwrite without prompting
        creates: "{{ app_dir }}/app.py"  # Key file that should exist after extraction

    # 5. Python virtual environment setup
    - name: Create Python virtualenv
      pip:
        name: virtualenv
        state: present
        executable: pip3

    - name: Initialize virtual environment
      command: "virtualenv --python=python3 {{ venv_path }}"
      args:
        creates: "{{ venv_path }}/bin/activate"

    # 6. Install requirements with dependency resolution
    - name: Install Python packages
      pip:
        requirements: "{{ app_dir }}/requirements.txt"
        virtualenv: "{{ venv_path }}"
        virtualenv_site_packages: no
        state: present
        extra_args: "--no-cache-dir"

    # 7. Systemd service configuration
    - name: Deploy systemd service
      template:
        src: "templates/flask_app.service.j2"
        dest: "/etc/systemd/system/flask_app.service"
        owner: root
        group: root
        mode: '0644'
        validate: "/usr/bin/systemd-analyze verify %s"
      notify:
        - Reload systemd
        - Restart Flask app

    # 8. Log rotation setup
    - name: Configure log rotation
      ansible.builtin.copy:
        src: "templates/flask_app.logrotate"
        dest: "/etc/logrotate.d/flask_app"
        owner: root
        group: root
        mode: '0644'

  handlers:
    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Restart Flask app
      systemd:
        name: flask_app
        state: restarted
        enabled: yes
        scope: system
      async: 30
      poll: 0